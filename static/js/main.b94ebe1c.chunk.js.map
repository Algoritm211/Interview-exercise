{"version":3,"sources":["components/TimerLayout/TimerItem/TimerItem.module.scss","components/AddTimerField/AddTimerField.module.scss","components/TimerLayout/TimerItem/TimerButton/TimerButton.module.css","App.module.css","helpers/timerhelper.js","redux/timer-reducer.js","components/AddTimerField/AddTimerField.jsx","components/TimerLayout/TimerItem/TimerButton/TimerButton.jsx","components/TimerLayout/TimerItem/TimerItem.jsx","components/TimerLayout/TimerLayout.jsx","components/TimerLayout/TimerLayoutContainer.jsx","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["module","exports","momentDurationFormatSetup","moment","getNewTime","input","addingNumber","seconds","duration","asSeconds","dur","format","trim","ADD_NEW_TIMER","HIDE_TIMERS","SHOW_TIMERS","UPDATE_TIMERS","REMOVE_TIMER","TOGGLE_PAUSE_TIMER","initialState","timers","id","label","currentTime","isPaused","saveTime","isHidden","setNewTimers","newTimers","type","connect","state","isTimersHidden","timer","dispatch","addTimer","timerName","newTimer","Date","now","toString","hideTimers","showTimers","props","useState","inputValue","setInputValue","className","classes","timerInput","htmlFor","value","onChange","event","target","timerInterfaceButtons","Button","onClick","variant","color","TimerButton","Icon","icon","IconButton","timerButton","TimerItem","timerLabel","removeTimer","togglePause","timerItem","timerActivity","buttons","PlayCircleOutlineIcon","PauseCircleOutlineIcon","RemoveCircleOutlineIcon","TimerLayout","timersTable","map","index","TimerLayoutContainer","this","getTimersFromLocalStorage","timerId","setInterval","processTime","clearInterval","setTimersToLocalStorage","style","textAlign","marginTop","React","Component","getState","timersToLocStorageReady","unix","localStorage","setItem","JSON","stringify","rawTimers","getItem","timersArrayReadyToState","parse","difference","newTime","mainApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","timersWithoutRemoved","filter","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b94ebe1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"timerItem\":\"TimerItem_timerItem__1OOsr\",\"timerActivity\":\"TimerItem_timerActivity__3nyuY\",\"timer\":\"TimerItem_timer__2EjT6\",\"buttons\":\"TimerItem_buttons__1dJm2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timerInput\":\"AddTimerField_timerInput__3Cwok\",\"timerInterfaceButtons\":\"AddTimerField_timerInterfaceButtons__1SZwm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"timerButton\":\"TimerButton_timerButton__2FHtB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainApp\":\"App_mainApp__26oop\"};","import moment from \"moment\";\nimport momentDurationFormatSetup from 'moment-duration-format';\n\nmomentDurationFormatSetup(moment);\n\nexport const getNewTime = (input, addingNumber = 0) => {\n  let seconds = moment.duration(input).asSeconds() + addingNumber;\n  let dur = moment.duration(seconds, 'seconds');\n  return dur.format('HH:mm:ss', {trim: false});\n};\n\n","import moment from 'moment'\nimport {getNewTime} from \"../helpers/timerhelper\";\n\nconst ADD_NEW_TIMER = 'timer/ADD_NEW_TIMER'\nconst HIDE_TIMERS = 'timer/HIDE_TIMER'\nconst SHOW_TIMERS = 'timer/SHOW_TIMER'\nconst UPDATE_TIMERS = 'timer/UPDATE_TIMERS'\nconst REMOVE_TIMER = 'timer/REMOVE_TIMER'\nconst TOGGLE_PAUSE_TIMER = 'timer/TOGGLE_PAUSE_TIMER'\n\n\nconst initialState = {\n  timers: [\n    {id: 1, label: 'Timer1', currentTime: '00:00:05', isPaused: false, saveTime: ''},\n    {id: 2, label: 'Timer2', currentTime: '25:59:56', isPaused: true, saveTime: ''},\n    {id: 3, label: 'Timer3', currentTime: '00:05:56', isPaused: false, saveTime: ''}\n  ],\n  isHidden: false\n}\n\n\nexport const timerReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_NEW_TIMER:\n      return {\n        ...state,\n        timers: [action.newTimer, ...state.timers]\n      }\n    case UPDATE_TIMERS:\n      return {\n        ...state,\n        timers: action.newTimers\n      }\n    case TOGGLE_PAUSE_TIMER:\n      return {\n        ...state,\n        timers: [...state.timers.map((timer) => {\n          if (timer.id === action.id) {\n            return {\n              ...timer,\n              isPaused: !timer.isPaused\n            }\n          }\n          return timer\n        })]\n      }\n    case SHOW_TIMERS:\n    case HIDE_TIMERS:\n      return {\n        ...state,\n        isHidden: action.isHidden\n      }\n    case REMOVE_TIMER:\n      const timersWithoutRemoved = state.timers.filter(timer => timer.id !== action.id)\n      return {\n        ...state,\n        timers: [...timersWithoutRemoved]\n      }\n    default:\n      return state\n  }\n}\n\nexport const addTimer = (timerName) => {\n  return {\n    type: ADD_NEW_TIMER,\n    newTimer: {\n      id: Date.now().toString(),\n      label: timerName === '' ? Date.now().toString() : timerName,\n      currentTime: '00:00:00',\n      isPaused: false\n    }\n  }\n}\n\nexport const removeTimer = (id) => {\n  return {\n    type: REMOVE_TIMER,\n    id: id\n  }\n}\n\nexport const togglePause = (id) => {\n  return {\n    type: TOGGLE_PAUSE_TIMER,\n    id: id\n  }\n}\n\n\nconst setNewTimers = (newTimers) => {\n  return {\n    type: UPDATE_TIMERS,\n    newTimers: newTimers\n  }\n}\n\nexport const showTimers = () => {\n  return {\n    type: SHOW_TIMERS,\n    isHidden: false\n  }\n}\n\nexport const hideTimers = () => {\n  return {\n    type: HIDE_TIMERS,\n    isHidden: true\n  }\n}\n\nexport const processTime = () => {\n  return (dispatch, getState) => {\n    const timers = getState().timer.timers\n\n    const newTimers = timers.map(timer => {\n      if (!timer.isPaused) {\n        return {\n          ...timer,\n          currentTime: getNewTime(timer.currentTime, 1)    //add .format('HH:mm:ss') if newTime MomentJS object\n        }\n      } else {\n        return timer\n      }\n    })\n    dispatch(setNewTimers(newTimers))\n  }\n}\n\nexport const setTimersToLocalStorage = () => {\n  return (dispatch, getState) => {\n    const timersToLocStorageReady = getState().timer.timers.map(timer => {\n      const saveTime = moment().unix()\n      return {\n        ...timer,\n        saveTime: saveTime,\n      }\n    })\n\n    localStorage.setItem('timers', JSON.stringify(timersToLocStorageReady))\n  }\n}\n\nexport const getTimersFromLocalStorage = () => {\n  return (dispatch) => {\n    const rawTimers = localStorage.getItem('timers')\n\n    if (rawTimers) {\n      const timersArray = JSON.parse(rawTimers)\n      const timersArrayReadyToState = timersArray.map(timer => {\n        if (!timer.isPaused) {\n          const nowMomentTime = moment().unix()\n          const difference = nowMomentTime - timer.saveTime\n          // In this context timer.currentTime is current time when timer was hidden\n          let newTime = getNewTime(timer.currentTime, difference)\n          return {\n            ...timer,\n            currentTime: newTime,\n          }\n        } else {\n          return timer\n        }\n      })\n      dispatch(setNewTimers(timersArrayReadyToState))\n    }\n  }\n}\n\n\n// let timestring1 = '03:59:01';\n// let startdate = moment(timestring1, 'hh:mm:ss');\n// let returned_endate = moment(startdate).add(1, 'second');\n//\n// console.log(returned_endate.format('hh:mm:ss'))\n\n","import React, {useState} from \"react\";\nimport classes from './AddTimerField.module.scss'\nimport {Button} from \"@material-ui/core\";\nimport AddBoxIcon from '@material-ui/icons/AddBox';\nimport {addTimer, hideTimers, showTimers} from \"../../redux/timer-reducer\";\nimport {connect} from \"react-redux\";\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\n\n\nconst AddTimerField = (props) => {\n\n  const [inputValue, setInputValue] = useState('')\n\n  const addNewTimer = () => {\n    props.addTimer(inputValue.trim())\n    setInputValue('')\n  }\n\n  return (\n    <div className={ classes.timerInput }>\n      <div>\n        <label htmlFor={ 'timerInput' }>Enter your new timer name</label>\n      </div>\n      <div>\n        <input\n          type={ 'text' }\n          id={ 'timerInput' }\n          value={ inputValue }\n          onChange={ (event) => setInputValue(event.target.value) }\n        />\n      </div>\n      <div className={classes.timerInterfaceButtons}>\n        <Button\n          onClick={ addNewTimer }\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          <AddBoxIcon/>\n          &nbsp;\n          Add new timer\n        </Button>\n        &nbsp;&nbsp;\n        {\n          !props.isTimersHidden\n            ? <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={ props.hideTimers }\n            >\n              <ArrowUpwardIcon/>\n              &nbsp;\n              Hide timers\n            </Button>\n\n            : <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={ props.showTimers }\n            >\n              <ArrowDownwardIcon/>\n              &nbsp;\n              Show timers\n            </Button>\n        }\n\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isTimersHidden: state.timer.isHidden\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTimer: (timerName) => {\n      dispatch(addTimer(timerName))\n    },\n    hideTimers: () => {\n      dispatch(hideTimers())\n    },\n    showTimers: () => {\n      dispatch(showTimers())\n    },\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimerField)","import React from \"react\";\nimport {IconButton} from '@material-ui/core'\nimport classes from './TimerButton.module.css'\n\nconst TimerButton = ({icon}) => {\n  const Icon = icon\n  return (\n    <IconButton>\n      <Icon className={ classes.timerButton }/>\n    </IconButton>\n  )\n}\nexport default TimerButton","import React from \"react\";\nimport classes from './TimerItem.module.scss'\nimport TimerButton from \"./TimerButton/TimerButton\";\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport PauseCircleOutlineIcon from '@material-ui/icons/PauseCircleOutline';\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline';\n\n\nconst TimerItem = ({timerLabel, currentTime, isPaused, removeTimer, togglePause}) => {\n  return (\n    <div className={ classes.timerItem }>\n      <div>\n        { timerLabel }\n      </div>\n      <div className={ classes.timerActivity }>\n        <div className={ classes.timer }>\n          { currentTime }\n        </div>\n        <div className={ classes.buttons }>\n          <div onClick={ togglePause }>\n            <TimerButton icon={ isPaused ? PlayCircleOutlineIcon : PauseCircleOutlineIcon }/>\n          </div>\n          <div onClick={ removeTimer }>\n            <TimerButton icon={ RemoveCircleOutlineIcon }/>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default TimerItem","import React from \"react\";\nimport TimerItem from \"./TimerItem/TimerItem\";\n\nconst TimerLayout = ({timers, removeTimer, togglePause}) => {\n\n  const timersTable = timers.map((timer, index) => {\n    return (\n      <TimerItem\n        key={ index }\n        timerLabel={ timer.label }\n        currentTime={ timer.currentTime }\n        isPaused={ timer.isPaused }\n        removeTimer={ () => removeTimer(timer.id) }\n        togglePause={ () => togglePause(timer.id) }\n      />\n    )\n  })\n\n  return (\n    <div>\n      { timersTable }\n    </div>\n  )\n}\nexport default TimerLayout","import React from \"react\";\nimport TimerLayout from \"./TimerLayout\";\nimport {connect} from \"react-redux\";\nimport {\n  getTimersFromLocalStorage,\n  processTime,\n  removeTimer,\n  setTimersToLocalStorage,\n  togglePause\n} from \"../../redux/timer-reducer\";\n\nclass TimerLayoutContainer extends React.Component {\n\n  componentDidMount() {\n    this.props.getTimersFromLocalStorage()\n    this.timerId = setInterval(this.props.processTime, 1000)\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId)\n    this.props.setTimersToLocalStorage()\n  }\n\n\n  render() {\n    if (this.props.isTimersHidden) {\n      return (\n        <div style={ {textAlign: 'center', marginTop: '25px'} }>Timers Hidden</div>\n      )\n    }\n    return (\n      <TimerLayout { ...this.props }/>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    timers: state.timer.timers,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    processTime: () => {\n      dispatch(processTime())\n    },\n    removeTimer: (id) => {\n      dispatch(removeTimer(id))\n    },\n    togglePause: (id) => {\n      dispatch(togglePause(id))\n    },\n    setTimersToLocalStorage: () => {\n      dispatch(setTimersToLocalStorage())\n    },\n    getTimersFromLocalStorage: () => {\n      dispatch(getTimersFromLocalStorage())\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimerLayoutContainer)","import React from \"react\";\nimport AddTimerField from \"./components/AddTimerField/AddTimerField\";\nimport TimerLayoutContainer from \"./components/TimerLayout/TimerLayoutContainer\";\nimport classes from './App.module.css'\nimport {connect} from \"react-redux\";\n\nfunction App(props) {\n\n  return (\n    <div className={ classes.mainApp }>\n      <div>\n        <AddTimerField/>\n        { !props.isTimersHidden && <TimerLayoutContainer/> }\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isTimersHidden: state.timer.isHidden\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\nimport thunkMiddleware from 'redux-thunk'\nimport {timerReducer} from \"./timer-reducer\";\n\n\nconst reducers = combineReducers({\n  timer: timerReducer\n})\n\n\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware))\n\nwindow.store = store\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from './redux/redux-store'\n\nReactDOM.render(\n  <Provider store={ store }>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}